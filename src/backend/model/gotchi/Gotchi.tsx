import { EatingHabit, Exercise, AlcoholHabit } from './FrequencyEnum';
import { Age, Weight, Illness } from './ConstantEnum'

/**
 * @type Model
 * @description
 * Container class for values generated by class @class GotchiRandomizer.
 * Represents the entity which the user is supposed to take care of during
 * the week. 
 */

export class Gotchi {
  private _name: string;
  private _bloodSugar: number;
  private _insulinPump: boolean;
  private _lchf: boolean;

  private _age: Age;
  private _eatingHabit: EatingHabit;
  private _exercise: Exercise;
  private _weight: Weight;
  private _alcoholHabit: AlcoholHabit;
  private _illnesses: Illness;
  private _gender: boolean;

  /**
   * 
   * @param name Name of the Gotchi given by the user
   * @param bloodSugar Blood-glucose level
   * @param insulinPump Boolean. Whether the Gotchi uses an
   * insulin-pump or not
   * @param lchf Boolean. Whether the Gotchi has a special diet
   * or not. LCHF as this was the only example given.
   * @param age Enum as per @enum ConstantEnum. Age of the Gotchi
   * @param eatingHabit @enum as per the FrequencyEnum. 
   * Determines how many times during a day the Gotchi eats food
   * @param exercise @enum as per the FrequencyEnum. Determines
   * how many times during a week the Gotchi exercises
   * @param weight @enum as per the ConstantEnum. Weight of the
   * Gotchi. 
   * @param alcoholHabit @enum as per the FrequencyEnum. Determines
   * how many times during a given week that the Gotchi consumes
   * alcohol.
   * @param gender Boolean. Determines the gender of the Gotchi. 
   * @param illnesses @enum ass per the ConstantEnum. Determines
   * any selected illnesses affecting the Gotchi during the week.
   */

  public constructor(
    name: string,
    bloodSugar: number,
    insulinPump: boolean,
    lchf: boolean,
    age: Age,
    eatingHabit: EatingHabit,
    exercise: Exercise,
    weight: Weight,
    alcoholHabit: AlcoholHabit,
    gender: boolean,
    illnesses: Illness) {
    this._name = name;
    this._bloodSugar = bloodSugar;
    this._insulinPump = insulinPump;
    this._lchf = lchf;
    this._age = age;
    this._alcoholHabit = alcoholHabit;
    this._weight = weight;
    this._exercise = exercise;
    this._eatingHabit = eatingHabit;
    this._gender = gender;
    this._illnesses = illnesses;
  }

  /**
   * Getters and setters for attributes.
   */

  get name(): string {
    return this._name;
  }
  get age(): number {
    return this._age;
  }
  get bloodValue(): number {
    return this._bloodSugar;
  }
  get insulinPump(): boolean {
    return this._insulinPump;
  }
  get lchf(): boolean {
    return this._lchf;
  }
  get eatHabit(): EatingHabit {
    return this._eatingHabit;
  }
  get exercise(): Exercise {
    return this._exercise;
  }
  get weight(): Weight {
    return this._weight;
  }
  get alcoholHabit(): AlcoholHabit {
    return this._alcoholHabit;
  }
  get illnesses(): Illness {
    return this._illnesses;
  }
  get gender(): boolean {
    return this._gender;
  }
  set name(name: string) {
    this._name = name;
  }
  set bloodValue(bloodValue: number) {
    this._bloodSugar = bloodValue;
  }
  set insulinPump(insulinPump: boolean) {
    this._insulinPump = insulinPump;
  }
  set lchf(lchf: boolean) {
    this._lchf = lchf;
  }
  set eatHabit(eatHabbit: EatingHabit) {
    this._eatingHabit = eatHabbit;
  }
  set exercise(exercise: Exercise) {
    this._exercise = exercise;
  }
  set weight(weight: Weight) {
    this._weight = weight;
  }
  set alcoholHabit(alcoholHabbit: AlcoholHabit) {
    this._alcoholHabit = alcoholHabbit;
  }
  set illnesses(illnesses: Illness) {
    this._illnesses = illnesses;
  }

  /**
   * This method is responsible for returning all constant 
   * values of the Gotchi which affects blood-glucose levels.
   * @returns [] of enum-values
   */

  constantValues(): any {
    let arr = [];
    arr.push(this._age);
    arr.push(this._weight);
    arr.push(this._illnesses);
    return arr;
  }

  /**
   * The following methods return string representations
   * of various fields for the GUI. 
   * @returns string formatted for presentation.
   */

  ageStringRepresentation() {
    switch (this._age) {
      case Age.YOUNG_ADULT: return "Ung vuxen";
      case Age.ADULT: return "Vuxen";
      case Age.SENIOR: return "Senior";
    }
  }
  
  genderStringRepresentation() {
    if (this._gender) {
      return "Kvinna"
    } else {
      return "Man";
    }
  }

  eatingHabitStringRepresentation() {
    switch (this._eatingHabit) {
      case EatingHabit.VOLATILE: return "Äter inkonsistent";
      case EatingHabit.CONSISTENT: return "Äter konsistent";
    }
  }

  exerciseHabitStringRepresentation() {
    switch (this._exercise) {
      case Exercise.VERY_ACTIVE: return "Tränar ofta";
      case Exercise.ACTIVE: return "Tränar regelbundet";
      case Exercise.INACTIVE: return "Tränar sällan";
    }
  }
}
