import { Gotchi } from "../../data/gotchi/Gotchi";

/**
 * @type Controller
 * @description 
 * This class has the responsibility of communicating information
 * to the user interface. This class is injected into the GUI in order
 * to register to callbacks and to handle user-input from events.
 */

export class GUIController {
    private _person: Gotchi;
    private _bloodSugarSubscribers: ((newBloodSugar: string) => void)[] = [];
    private _gotchisname: string;

    /**
     * Constructor for class
     * @param person takes the default-gotchi generated by @class 
     * Storage. Field is later updated by @class ScanarioController
     * after boot-up.
     */

    constructor(person: Gotchi) {
        this._person = person;
        this._gotchisname = "";
    }

    /**
     * This method takes 
     * @param newBloodSugar new blood-glucose value to be set
     * and sets the value in the object of @class Gotchi. After-
     * wards it notifies the subscribers of that number effectively
     * updating the value in the GUI.
     */

    setBloodSugar(newBloodSugar: number) {
        this._person.bloodValue = newBloodSugar;
        this.notifySubscribers(newBloodSugar.toFixed(1).toString());
    }

    /**
     * 
     * @param callback 
     * @returns 
     */

    subscribeToBloodSugar(callback: (newBloodSugar: string) => void) {
        this._bloodSugarSubscribers.push(callback);
        return () => {
            const index = this._bloodSugarSubscribers.indexOf(callback);
            if (index !== -1) {
                this._bloodSugarSubscribers.splice(index, 1);
            }
        };
    }

    private notifySubscribers(newBloodSugar: string) {
        this._bloodSugarSubscribers.forEach((callback) => {
            callback(newBloodSugar);
        });
    }

    /**
     * This method is responsible for taking input from the user
     * when selecting answers for @class UserInteractableEvent
     * @param buttonName name of the button that the user pressed
     */

    handleButtonAnswer(buttonName: String): void {
        // fetch current event and check if option is correct to that value
        console.log("handling button: " + buttonName);
        let correct = false;
        if (correct) {
            console.log("is correct");
        }
        else {
            console.log("is wrong");
        }
    }

    /**
     * Getters, setters for fields
     */

    set gotchisName(newName: string) {
        this._gotchisname = newName;
    }
    get gotchisName(): string {
        return this._gotchisname;
    }
    get person(): Gotchi {
        return this._person;
    }
    get bloodSugarSubscribers(): ((newBloodSugar: string) => void)[] {
        return this._bloodSugarSubscribers;
    }
}